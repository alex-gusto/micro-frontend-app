<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title><%= htmlWebpackPlugin.options.title %></title>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5.0, user-scalable=1"
    />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <script type="systemjs-importmap" src="/importmap-libs.json"></script>
    <script type="systemjs-importmap" src="/importmap-apps.json"></script>

    <% if (isServe) { %>
    <script type="systemjs-importmap" src="/importmap-apps.dev.json"></script>
    <% } %>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.14.3/system.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.14.3/extras/amd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.14.3/extras/use-default.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.14.3/extras/named-register.min.js"></script>

    <script>
      const instantiateHook = System.constructor.prototype.instantiate;
      System.constructor.prototype.instantiate = function (name) {
        if (name.startsWith("libs:")) {
          return System.import("@mf/libs")
            .then((m) => m.get(name.replace("libs:", "")))
            .then((factory) => factory())
            .then((m) => [
              [],
              function (_export) {
                return {
                  execute: function () {
                    _export(m);

                    if (m.default) {
                      _export("default", m.default);
                    } else {
                      _export("default", m);
                    }
                  },
                };
              },
            ]);
        }

        return instantiateHook.call(this, name);
      };
    </script>
    <script>
      const files = [<%= htmlWebpackPlugin.files.js.map(path => `'${path}'`) %>];

      let response = null
      while (files.length) {
        const filePath = files.shift()
        response = response ? response.then(() => System.import(filePath)) : System.import(filePath)
      }
    </script>
  </head>

  <body style="overflow: hidden">
    <div id="loader">
      <style type="text/css">
        #loader {
          position: fixed;
          inset: 0;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        #loader.hidden {
          visibility: hidden;
          opacity: 0;
        }

        #loader .loader {
          width: 50px;
          aspect-ratio: 1;
          border-radius: 50%;
          border: 8px solid #0000;
          border-right-color: #ffa50097;
          position: relative;
          animation: l24 1s infinite linear;
        }
        #loader .loader:before,
        #loader .loader:after {
          content: "";
          position: absolute;
          inset: -8px;
          border-radius: 50%;
          border: inherit;
          animation: inherit;
          animation-duration: 2s;
        }
        #loader .loader:after {
          animation-duration: 4s;
        }

        @keyframes l24 {
          100% {
            transform: rotate(1turn);
          }
        }
      </style>

      <div class="loader"></div>
    </div>
  </body>
</html>
